interprocess communication
****************
synchronous communication
  - request/response
  - RPC and REST
asynchronous communication
  - event based
  - choreography
  - loose coupling, more scalable


RPC
  - Java RMI, SOAP, Trift, gRPC
  - Terms: Marsheling, Unmarshelling, server stub, client stub
  upsides:
    - ease of use
  downsides:
    - Technology coupling eg Java RMI
    - cost associated with remote calls which get mixed with local locals.
    - change in interface requires Server as well as client stub deployment.


REST : REpresentational State Transfer
  - architectural style inspired by web
  - noun specifies resource and verbs specify operation on them.
  - communication must be stateless and cacheable.
  - specified no underlying protocol but HTTP 1.1 mostly used
  - HATEOS : Hypermedia as the engine of application state
      - representation of resource contains links to other related resources.     
      - Clients navigate them and discovers new resources and operations.
      - Decreased coupling between client and server.

  Downsides:
    - not well suited for low latency.

Domain name system:
  - domain name => ip address
  - managed DNS service like CloudFare, Route 53
      - Weighed Round robing
      - Latency based
      - geolocation based

Load Balancer:
  - distributes incoming traffic across target servers.
  - distribution policy
  - public IP and servers can have private IP.

Content delivery network:
  - proxy servers geographically distributed
  - closer to user, reduced RTT
  - needs redirection.
  - cloudFront
  - push CDNs
      - can specify which content, when that content will expire and when it has to be updated.
      - more storage, less traffic
      -? preffered for sites with low traffic
  - pull CDNs
      - cache response until it expires.
      - less storage, more traffic
      -? preffered for sites with high traffic
    
API gateway:
  - Rate limiting
  - SSL termination
  - authentication
  - IP whitelisting
  - servicing static content

Consistent hashing
  - on average k/n keys needs to be remapped on resizing of hash table.
  - hash space and hash ring
  - hash servers and hash keys
  - virtual nodes
  - nodes addition and removal

Versioning:
  - semantic versioning : MAJOR.MINOR.PATCH
  - Tolerant reader, Consumer driven contract.
  - expand and contract pattern.
  - For HTTP, Putting version number in request header and also in URI itself.
  - For gRPC, putting methods in new namespace.
  


Monitoring:
  - metrics vs log
  - metric tracking:
      - prometheus,
      - graphite
  - metrics : response time, error rate, system metrics
  - semantic monitoring
  - correlation IDs
  - all log information must be collected on a central server.
  - better to log in a standard json format.    
  - logging Tools 
      - logstash: can parse log data and send it to the search server as JSON
      - Kibana : UI for visualizing, searchin and analyzing the data.
      - logstash => elastic search => Kibana        
      
Testing:
  - Unit Testing
  - service Testing
  - end-to-end Testing
  - Consumer driven contracts
  - Canary releasing
  - Mean time to repair over mean time between failures.

Client library:
  - useful for service discovery, failure mode, logging etc
  - client should be responsible for maintenance and upgrade
  - may led to Increased coupling between client and server

HOW_TO_SCALE
-load balancer
- database replication
- caching

Numbers to remember:
  - Availability:
      - 99.99% or four 9s : 8.6s
      - 99.9% or three 9s : 1m 26s
  - Main memory reference: 100ns
  - HDD = 30X SSD = 120X memory
  - Sequential read:
      - HDD: 30 MB/s
      - SDD: 1 GB/s
      - Main memory: 4 GB/s
  - HTP codes
      - 429: too many requests
